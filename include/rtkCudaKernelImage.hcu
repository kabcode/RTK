#ifndef __rtkCudaKernelImage_hcu
#define __rtkCudaKernelImage_hcu

#include "RTKExport.h"
#include "rtkCudaUtilities.hcu"
#include "rtkConfiguration.h"

namespace rtk
{

  template<class PixelType, unsigned int TImageDimension>
  class RTK_EXPORT CudaKernelImage
  {
  public:
    CudaKernelImage() = default;
    ~CudaKernelImage() = default;

    __host__ __device__ void Print();

    __host__ void SetSpacing(std::vector<PixelType> spacing);
    

  private:
    unsigned int size[TImageDimension];
    std::vector<PixelType> spacing[TImageDimension];
    float origin[TImageDimension];
    float direction[TImageDimension * TImageDimension];
    float* data;
    cudaTextureObject_t texObj_in = 0;

  };


}

#endif

/*=========================================================================
 *
 *  Copyright RTK Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/

#ifndef __rtkCudaResampleImageFilter_hcu
#define __rtkCudaResampleImageFilter_hcu

#include "RTKExport.h"
#include "itkMatrix.h"
#include "itkVector.h"

template< unsigned int TDimension>
class CudaImageProps
{
public:
  CudaImageProps() = default;
  ~CudaImageProps() = default;

  int size[TDimension];
  float spacing[TDimension];
  float origin[TDimension];
  float direction[TDimension][TDimension];
  float* data;
  cudaTextureObject_t texObj_in = 0;

};

template<unsigned int TInDimension, unsigned int TOutDimension>
class CudaTransformProps
{
public:
  CudaTransformProps() = default;
  ~CudaTransformProps() = default;

  float Matrix[TInDimension*TOutDimension];
  float Offset[TOutDimension];

  template<class ParameterType>
  __host__ void SetMatrix(itk::Matrix<ParameterType> InMatrix)
  {
    auto vnlmatrix = InMatrix.GetVnlMatrix().data_block();
    for (auto i = 0; i < InMatrix.GetVnlMatrix().size(); ++i)
      Matrix[i] = vnlmatrix[i];
  }

  template<class ParameterType>
  __host__ void SetOffset(itk::Vector<ParameterType> InOffset)
  {
    auto vnlvector = InOffset.GetVnlVector().data_block();
    for (auto i = 0; i < InOffset.GetVnlVector().size(); ++i)
      Offset[i] = vnlvector[i];
  }
};



template <unsigned int TDimension>
void RTK_EXPORT
CUDA_resample(
  CudaImageProps<TDimension>* h_in,
  CudaImageProps<TDimension>* h_out,
  CudaTransformProps<TDimension, TDimension>* h_trans
);


#endif
